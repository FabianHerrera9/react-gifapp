{"version":3,"sources":["components/addCatg.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","Gifapp.js","index.js"],"names":["AddCatg","setcatg","useState","InpVal","setInpt","onSubmit","e","preventDefault","trim","length","catg","console","log","type","value","placeholder","onChange","target","getGifs","catgry","a","url","encodeURI","fetch","res","json","data","gifsdt","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","imgs","Gifapp","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEtB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAeC,EAAf,KAoBA,OACI,mCACI,uBAAMC,SAfG,SAACC,GACdA,EAAEC,iBAEEJ,EAAOK,OAAOC,OAAS,IAEvBR,GAAQ,SAAAS,GAAI,OAAKP,GAAL,mBAAgBO,OAC5BN,EAAQ,KAKZO,QAAQC,IAAI,cAIR,UACI,8CACA,uBAAOC,KAAM,OAAOC,MAAQX,EAASY,YAAY,YAAYC,SAtBxD,SAACV,GAEdF,EAAQE,EAAEW,OAAOH,gB,+BCRZI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACH,mCACVC,EAFa,iDAEoCC,UAAUH,GAF9C,6BACH,oCADG,SAGDI,MAAOF,GAHN,cAGbG,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAGFC,EAASD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CAEHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAiBZM,GAjBY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCLHO,EAAU,SAAC,GAAc,IAAbnB,EAAY,EAAZA,OAErB,ECHwB,SAAEA,GAE1B,MAA0BjB,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAd,GACCY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAI1B,CAACpB,IASGqB,EDvBuBI,CAAazB,GAA9B0B,EAAb,EAAQnB,KAAWa,EAAnB,EAAmBA,QAEnB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAwDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEaU,EAAKjB,KAAI,SAAAiB,GAAI,OACT,cAAC,EAAD,eAEQA,GADCA,EAAKf,aEX7BgB,EAAS,WAElB,MAAwB5C,mBAAS,CAAC,mBAAlC,mBAAOQ,EAAP,KAAaT,EAAb,KAcA,OACI,qCACI,yCACA,cAAC,EAAD,CAASA,QAASA,IAClB,uBAEA,6BAGQS,EAAKkB,KAAK,SAAAlB,GAAI,OACV,cAAC,EAAD,CAEIS,OAAQT,GADHA,Y,MC3BjCqC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7b839036.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCatg = ({ setcatg }) => {\r\n\r\n    const [InpVal, setInpt] = useState('')\r\n\r\n    const hndlInpt = (e) =>{\r\n        //console.log(e.target.value);\r\n        setInpt(e.target.value);\r\n    }\r\n    \r\n    const hndlSmmt = (e) =>{\r\n        e.preventDefault();\r\n        \r\n        if( InpVal.trim().length > 2 ){\r\n            \r\n            setcatg(catg => [InpVal, ...catg  ]);\r\n            setInpt('');\r\n\r\n        }\r\n\r\n\r\n        console.log('Submmited');\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit = { hndlSmmt } >\r\n                <h2>Add Category</h2>\r\n                <input type= \"text\" value={ InpVal } placeholder='Type here' onChange= { hndlInpt }/>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCatg.propTypes = {\r\n    setcatg: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async(catgry) => {\r\n    const api_key = 'n3lAZflPuzxyOB9s3DE6AuBbpomgNZ6K'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(catgry) }&limit=10&api_key=${api_key}`;\r\n    const res = await fetch( url );\r\n    const { data } = await res.json();\r\n    //console.log(data);\r\n\r\n    const gifsdt = data.map( img => {\r\n        return {\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    \r\n    return gifsdt;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    //console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({catgry}) => {\r\n\r\n    const { data:imgs ,loading} = useFetchGifs(catgry);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDown\" >{catgry}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\" >loading</p> }\r\n           <div className=\"card-grid\">\r\n                    {\r\n                        imgs.map(imgs =>(\r\n                            <GifGridItem \r\n                                key={imgs.id} \r\n                                {...imgs}\r\n                            />\r\n                        ))\r\n                    } \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( catgry ) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        \r\n        getGifs( catgry )\r\n            .then( img => {\r\n                    setstate({\r\n                        data: img,\r\n                        loading: false\r\n                    })\r\n        })\r\n        \r\n    }, [catgry])\r\n\r\n    /* setTimeout(() => {\r\n        setstate({\r\n            data: [1,2,3,4,5,6],\r\n            loading: false\r\n        })\r\n    }, 3000); */\r\n\r\n    return state\r\n    \r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCatg } from './components/addCatg';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const Gifapp = () => {\r\n\r\n    const [catg, setcatg] = useState(['Genshin Impact'])\r\n\r\n    /* const HndlEvnt = () =>{\r\n        //add to botton of []\r\n        //setcatg([...catg, 'Overwatch']);\r\n\r\n        //add to top of []\r\n        setcatg(['Overwatch', ...catg, ]);\r\n\r\n        //add to top of [] using Callback with the previos [] values and send the new\r\n        setcatg( catg => ['Overwatch', ...catg, ]);\r\n        console.log(catg);\r\n    }; */\r\n    \r\n    return (\r\n        <>\r\n            <h2>Gif App</h2>\r\n            <AddCatg setcatg={setcatg} />\r\n            <hr/>\r\n            {/* <button onClick={ HndlEvnt } >Agregar </button> */}\r\n            <ul>\r\n                {\r\n                    /* catg.map( catg => (<li key={catg} >{catg}</li>)) */\r\n                    catg.map( catg => (\r\n                        <GifGrid \r\n                            key={catg}\r\n                            catgry={catg}\r\n                        />\r\n                    ))\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Gifapp } from './Gifapp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <Gifapp/>,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}